------------------------------------------------------------------------------------

Создание Radis контейнера

docker run --name redis-django -p 6379:6379 -d redis

------------------------------------------------------------------------------------

Подключение командной строки в контейнере Docker

docker exec -it redis-container redis-cli

, где
redis-container - это имя или ID контейнера.


Проверка работы Redis без подключения через терминал.

docker exec -it redis-container redis-cli ping

Ответ должен быть PONG.

------------------------------------------------------------------------------------

В файле settings.py

# ------------------ CELERY ------------------
# Использование Redis как брокер сообщений.
# DB брокер сообщений - #0.
CELERY_BROKER_URL = 'redis://localhost:6379/0'

# Хранение результатов задач.
# DB для хранения результатов - #1.
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
# Celery задание времени хранения результата выполнения задачи = 1 час.
CELERY_RESULT_EXPIRES = timedelta(hours=1)
# Celery задание времени хранения результата выполнения задачи = 2 дня.
# CELERY_RESULT_EXPIRES = timedelta(days=2)
# ------------------ CELERY ------------------

------------------------------------------------------------------------------------

Проверить работу Celery | Перезагрузить Celery. В Терминале в папке проекта, где находится файл cellery.

celery -A test_project worker --loglevel=info

,где
celery - это исполняемый файл Celery.
-A test_project - указывает на приложение или модуль, в котором находится конфигурация Celery.
worker - говорит Celery запустить рабочий процесс.
--loglevel=info - указывает уровень логирования (в данном случае "info").

При внесении изменений, так же требуется ввести данную команду, чтобы перезагрузить Celery с новыми настройками.


Уровни логирования
В Celery доступны следующие уровни логирования:

1. **`DEBUG`**: 
   - Выводит наибольшее количество деталей, включая все отладочные сообщения.
   - Полезен при диагностике проблем или при понимании, как именно работает ваше приложение.

2. **`INFO`**:
   - Выводит информационные сообщения, включая выполнение задач.
   - Обычно это наиболее подходящий уровень для производственного использования.

3. **`WARNING`**:
   - Выводит только предупреждения и более серьезные сообщения.
   - Это может включать в себя сообщения о потенциальных проблемах в приложении.

4. **`ERROR`**:
   - Выводит только ошибки.
   - Когда что-то идет не так, это сообщения, которые вы, вероятно, захотите видеть.

5. **`CRITICAL`**:
   - Выводит сообщения только для критических ошибок.
   - Это ситуации, когда что-то пошло катастрофически не так и приложение может не работать.

Когда вы устанавливаете уровень логирования, вы будете видеть сообщения для этого уровня и все более критические сообщения. Например, если вы установите уровень `WARNING`, вы увидите предупреждения, ошибки и критические ошибки, но не информационные или отладочные сообщения.



------------------------------------------------------------------------------------

Django коммандная строка

python manage.py shell








# ------------------------------------------- CELERY -------------------------------------------------
Во время работы CELERY.
Посмотреть активные задачи:

celery -A test_project inspect active      

Посмотреть запланированные задачи:

celery -A test_project inspect scheduled

Посмотреть задачи в очереди:

celery -A test_project inspect reserved




from api_file_upload.tasks import add_test
# Просто выполнить
result = add_test(4, 4)
print(result)

# Отправить в Celery
result = add_test.delay(4, 4)

# Посмотреть 
result.ready()  # Это должно вернуть True, если задача выполнена
result.result   # Это должно вернуть 8, если задача была успешно выполнена






Docker

Остановите контейнер:

docker stop redis-django


Запустите контейнер снова:

docker start redis-django







